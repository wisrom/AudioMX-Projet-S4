/*
 *
 * @file main.c
 * @brief Main routine
 *
 * @section License
 *
 * Copyright (C) 2010-2018 Oryx Embedded SARL. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @author Oryx Embedded SARL (www.oryx-embedded.com)
 * @version 1.9.0
 **/

//Dependencies
#include <stdlib.h>
#include "xparameters.h"
#include <stdio.h>
#include "xil_io.h"
#include "common/os_port.h"
#include "cyclone_tcp/core/net.h"
#include "cyclone_tcp/net_config.h"
#include "cyclone_tcp/drivers/eth/enc624j600_driver.h"
#include "cyclone_tcp/core/udp.h"
#include "common/error.h"
#include "cyclone_tcp/std_services/echo.h"
#include "xgpio.h"
#include "xuartlite.h"
#include "xspi.h"
#include "cyclone_tcp/spi_driver.h"
#include "cyclone_tcp/ext_int_driver.h"
#include <stdbool.h>
#include "fft.h"


//Application configuration
#define APP_USE_DEFAULT_MAC_ADDR ENABLED
#define APP_MAC_ADDR "00-AB-CD-EF-07-95"

#define APP_USE_DHCP DISABLED
#define APP_IPV4_HOST_ADDR "192.168.13.2"
#define APP_IPV4_SUBNET_MASK "255.255.255.0"
#define APP_IPV4_DEFAULT_GATEWAY "192.168.13.1"
#define APP_IPV4_PRIMARY_DNS "8.8.8.8"
#define APP_IPV4_SECONDARY_DNS "8.8.4.4"

#define APP_USE_SLAAC DISABLED


#define INTC_DEVICE_ID			XPAR_MICROBLAZE_0_AXI_INTC_DEVICE_ID


//Global variables

u32 counter = 0;
XGpio outputLED;

/**************FFT configuration************/

#include <math.h>
#include <stdint.h>

#define PI 3.14159265358979323846
#define MAX_FFT_SIZE 1024

// Buffers principaux (signal et résultat FFT)
u32 FFTBuffer[MAX_DATA_BUFFER_SIZE];      // Résultat FFT (même format)
u32 SourceBuffer[MAX_DATA_BUFFER_SIZE];
u32 iFFTResult[MAX_DATA_BUFFER_SIZE];

//uint32_t SourceBuffer[MAX_FFT_SIZE] = {
//    0U,    0U,    1U,    2U,    4U,    8U,    11U,    14U,
//    16U,    16U,    13U,    6U,    65532U,    65517U,    65500U,    65481U,
//    65463U,    65447U,    65437U,    65434U,    65441U,    65458U,    65486U,    65524U,
//    35U,    87U,    140U,    190U,    231U,    259U,    269U,    258U,
//    223U,    165U,    86U,    65527U,    65420U,    65311U,    65207U,    65118U,
//    65054U,    65021U,    65026U,    65072U,    65159U,    65284U,    65441U,    83U,
//    270U,    453U,    616U,    744U,    825U,    848U,    807U,    701U,
//    533U,    312U,    50U,    65303U,    65017U,    64752U,    64529U,    64369U,
//    64286U,    64294U,    64397U,    64593U,    64872U,    65218U,    73U,    481U,
//    876U,    1226U,    1504U,    1683U,    1744U,    1678U,    1481U,    1163U,
//    742U,    243U,    65238U,    64692U,    64183U,    63752U,    63434U,    63258U,
//    63246U,    63404U,    63728U,    64202U,    64797U,    65472U,    645U,    1336U,
//    1956U,    2456U,    2793U,    2936U,    2865U,    2579U,    2089U,    1425U,
//    630U,    65294U,    64407U,    63571U,    62850U,    62303U,    61976U,    61901U,
//    62094U,    62548U,    63240U,    64125U,    65145U,    693U,    1761U,    2733U,
//    3535U,    4102U,    4383U,    4349U,    3992U,    3329U,    2399U,    1263U,
//    0U,    64235U,    62991U,    61898U,    61042U,    60493U,    60300U,    60488U,
//    61054U,    61966U,    63167U,    64576U,    558U,    2076U,    3482U,    4670U,
//    5544U,    6033U,    6091U,    5701U,    4882U,    3682U,    2181U,    482U,
//    64241U,    62516U,    60971U,    59723U,    58874U,    58493U,    58622U,    59262U,
//    60378U,    61899U,    63723U,    185U,    2215U,    4129U,    5781U,    7046U,
//    7822U,    8040U,    7672U,    6733U,    5280U,    3408U,    1247U,    64485U,
//    62216U,    60144U,    58425U,    57192U,    56546U,    56547U,    57207U,    58491U,
//    60316U,    62560U,    65066U,    2119U,    4601U,    6794U,    8531U,    9675U,
//    10131U,    9854U,    8850U,    7179U,    4952U,    2322U,    65011U,    62152U,
//    59490U,    57224U,    55527U,    54533U,    54327U,    54938U,    56335U,    58429U,
//    61079U,    64098U,    1737U,    4837U,    7634U,    9918U,    11513U,    12292U,
//    12185U,    11184U,    9350U,    6803U,    3720U,    317U,    62374U,    59074U,
//    56196U,    53957U,    52531U,    52035U,    52517U,    53958U,    56266U,    59285U,
//    62804U,    1037U,    4784U,    8235U,    11132U,    13257U,    14443U,    14590U,
//    13674U,    11747U,    8936U,    5435U,    1490U,    62920U,    58950U,    55410U,
//    52562U,    50624U,    49750U,    50017U,    51420U,    53871U,    57204U,    61186U,
//    0U,    4403U,    8539U,    12103U,    14826U,    16501U,    16992U,    16249U,
//    14312U,    11309U,    7446U,    2994U,    63809U,    59160U,    54923U,    51412U,
//    48891U,    47556U,    47517U,    48791U,    51300U,    54874U,    59265U,    64159U,
//    3671U,    8504U,    12769U,    16147U,    18385U,    19305U,    18828U,    16974U,
//    13865U,    9713U,    4812U,    65048U,    59730U,    54783U,    50571U,    47408U,
//    45535U,    45101U,    46152U,    48625U,    52352U,    57075U,    62458U,    2579U,
//    8101U,    13082U,    17157U,    20018U,    21448U,    21328U,    19655U,    16535U,
//    12185U,    6909U,    1085U,    60669U,    55020U,    50089U,    46241U,    43765U,
//    42854U,    43586U,    45922U,    49704U,    54669U,    60465U,    1140U,    7317U,
//    13010U,    17801U,    21333U,    23340U,    23664U,    22269U,    19243U,    14794U,
//    9236U,    2965U,    61969U,    55648U,    50001U,    45444U,    42315U,    40854U,
//    41178U,    43276U,    47007U,    52112U,    58227U,    64916U,    6159U,    12535U,
//    18041U,    22272U,    24911U,    25756U,    24733U,    21905U,    17467U,    11731U,
//    5106U,    63605U,    56665U,    50328U,    45058U,    41245U,    39175U,    39010U,
//    40771U,    44343U,    49476U,    55806U,    62879U,    4648U,    11657U,    17857U,
//    22793U,    26100U,    27528U,    26963U,    24436U,    20120U,    14319U,    7448U,
//    0U,    58050U,    51071U,    45108U,    40599U,    37880U,    37157U,    38492U,
//    41799U,    46845U,    53273U,    60621U,    2824U,    10394U,    17242U,    22869U,
//    26860U,    28917U,    28883U,    26751U,    22668U,    16920U,    9920U,    2171U,
//    59768U,    52216U,    45601U,    40407U,    37018U,    35686U,    36516U,    39457U,
//    44303U,    50708U,    58213U,    741U,    8780U,    16211U,    22490U,    27159U,
//    29872U,    30426U,    28773U,    25026U,    19450U,    12444U,    4513U,    61765U,
//    53729U,    46526U,    40680U,    36621U,    34649U,    34912U,    37399U,    41934U,
//    48195U,    55732U,    64000U,    6866U,    14792U,    21665U,    26983U,    30357U,
//    31537U,    30431U,    27115U,    21823U,    14936U,    6950U,    63978U,    55564U,
//    47855U,    41413U,    36707U,    34083U,    33736U,    35694U,    39821U,    45821U,
//    53262U,    61606U,    4715U,    13032U,    20418U,    26336U,    30353U,    32175U,
//    31667U,    28861U,    23958U,    17311U,    9399U,    795U,    57658U,    49546U,
//    42582U,    37275U,    34011U,    33029U,    34403U,    38036U,    43666U,    50887U,
//    59177U,    2399U,    10991U,    18793U,    25239U,    29859U,    32319U,    32437U,
//    30204U,    25781U,    19486U,    11775U,    3208U,    59940U,    51538U,    44148U,
//    38306U,    34435U,    32818U,    33571U,    36641U,    41806U,    48691U,    56797U,
//    0U,    8739U,    16845U,    23729U,    28892U,    31962U,    32714U,    31097U,
//    27226U,    21384U,    13995U,    5595U,    62329U,    53764U,    46055U,    39763U,
//    35341U,    33109U,    33228U,    35687U,    40307U,    46751U,    54550U,    63138U,
//    6356U,    14642U,    21860U,    27486U,    31116U,    32489U,    31507U,    28244U,
//    22940U,    15980U,    7873U,    64741U,    56143U,    48237U,    41595U,    36696U,
//    33893U,    33386U,    35207U,    39221U,    45135U,    52515U,    60825U,    3926U,
//    12263U,    19697U,    25691U,    29813U,    31769U,    31421U,    28799U,    24098U,
//    17662U,    9961U,    1556U,    58594U,    50617U,    43738U,    38454U,    35142U,
//    34038U,    35217U,    38587U,    43899U,    50763U,    58679U,    1534U,    9791U,
//    17317U,    23569U,    28097U,    30580U,    30842U,    28872U,    24819U,    18981U,
//    11789U,    3765U,    61030U,    53112U,    46117U,    40551U,    36811U,    35161U,
//    35715U,    38424U,    43085U,    49354U,    56771U,    64796U,    7310U,    14801U,
//    21194U,    26030U,    28964U,    29793U,    28463U,    25080U,    19896U,    13294U,
//    5756U,    63370U,    55636U,    48651U,    42916U,    38842U,    36715U,    36682U,
//    38735U,    42717U,    48332U,    55166U,    62718U,    4904U,    12235U,    18647U,
//    23681U,    26979U,    28310U,    27588U,    24875U,    20378U,    14429U,    7467U,
//    0U,    58107U,    51254U,    45469U,    41164U,    38644U,    38082U,    39506U,
//    42805U,    47728U,    53912U,    60901U,    2650U,    9703U,    16014U,    21132U,
//    24693U,    26449U,    26283U,    24219U,    20417U,    15162U,    8844U,    1925U,
//    60446U,    53842U,    48124U,    43700U,    40882U,    39863U,    40705U,    43336U,
//    47554U,    53043U,    59398U,    618U,    7284U,    13379U,    18465U,    22183U,
//    24273U,    24595U,    23139U,    20021U,    15479U,    9852U,    3554U,    62582U,
//    56334U,    50796U,    46365U,    43351U,    41961U,    42285U,    44285U,    47804U,
//    52577U,    58248U,    64400U,    5051U,    10823U,    15768U,    19535U,    21861U,
//    22589U,    21681U,    19215U,    15383U,    10472U,    4847U,    64455U,    58656U,
//    53404U,    49073U,    45968U,    44302U,    44183U,    45607U,    48457U,    52513U,
//    57472U,    62968U,    3064U,    8422U,    13122U,    16832U,    19292U,    20337U,
//    19905U,    18041U,    14893U,    10701U,    5778U,    486U,    60748U,    55871U,
//    51741U,    48648U,    46804U,    46330U,    47246U,    49472U,    52834U,    57077U,
//    61885U,    1369U,    6238U,    10604U,    14158U,    16653U,    17920U,    17880U,
//    16552U,    14045U,    10553U,    6340U,    1717U,    62559U,    58133U,    54293U,
//    51307U,    49382U,    48645U,    49133U,    50799U,    53506U,    57049U,    61160U,
//    0U,    4323U,    8281U,    11592U,    14027U,    15421U,    15686U,    14816U,
//    12891U,    10061U,    6543U,    2599U,    64056U,    60137U,    56659U,    53868U,
//    51954U,    51045U,    51192U,    52370U,    54481U,    57359U,    60785U,    64506U,
//    2712U,    6206U,    9203U,    11494U,    12924U,    13402U,    12909U,    11493U,
//    9270U,    6413U,    3138U,    65222U,    61845U,    58785U,    56259U,    54439U,
//    53447U,    53341U,    54114U,    55697U,    57963U,    60738U,    63813U,    1426U,
//    4420U,    7047U,    9124U,    10509U,    11114U,    10910U,    9924U,    8240U,
//    5993U,    3354U,    520U,    63234U,    60628U,    58422U,    56766U,    55772U,
//    55498U,    55951U,    57085U,    58805U,    60978U,    63438U,    465U,    2947U,
//    5169U,    6977U,    8247U,    8900U,    8900U,    8261U,    7040U,    5338U,
//    3286U,    1040U,    64302U,    62163U,    60312U,    58874U,    57946U,    57583U,
//    57799U,    58566U,    59818U,    61453U,    63345U,    65353U,    1793U,    3595U,
//    5099U,    6202U,    6834U,    6960U,    6584U,    5744U,    4511U,    2984U,
//    1279U,    65060U,    63382U,    61900U,    60715U,    59907U,    59523U,    59580U,
//    60064U,    60927U,    62099U,    63487U,    64985U,    947U,    2337U,    3521U,
//    4421U,    4978U,    5163U,    4972U,    4430U,    3586U,    2508U,    1282U,
//    0U,    64292U,    63173U,    62258U,    61605U,    61254U,    61221U,    61499U,
//    62057U,    62846U,    63804U,    64855U,    384U,    1387U,    2258U,    2937U,
//    3383U,    3572U,    3498U,    3176U,    2638U,    1930U,    1109U,    238U,
//    64917U,    64137U,    63486U,    63006U,    62726U,    62658U,    62798U,    63129U,
//    63619U,    64227U,    64904U,    62U,    724U,    1305U,    1769U,    2086U,
//    2240U,    2227U,    2055U,    1743U,    1322U,    824U,    291U,    65299U,
//    64812U,    64401U,    64092U,    63901U,    63837U,    63897U,    64072U,    64343U,
//    64684U,    65068U,    65465U,    309U,    645U,    916U,    1105U,    1204U,
//    1211U,    1131U,    975U,    758U,    502U,    225U,    65487U,    65235U,
//    65022U,    64860U,    64758U,    64720U,    64743U,    64821U,    64945U,    65101U,
//    65277U,    65456U,    91U,    241U,    360U,    443U,    487U,    491U,
//    459U,    397U,    312U,    213U,    109U,    9U,    65455U,    65381U,
//    65327U,    65295U,    65285U,    65294U,    65321U,    65360U,    65407U,    65456U,
//    65504U,    11U,    46U,    71U,    86U,    91U,    88U,    78U,
//    64U,    48U,    31U,    16U,    4U,    65531U,    65525U,    65523U,
//    65523U,    65525U,    65528U,    65531U,    65534U,    65535U,    0U,    0U,
//};

int16_t windowTable[MAX_FFT_SIZE] = {
    0,    0,    1,    3,    5,    8,    11,    15,
    20,    25,    31,    37,    44,    52,    61,    69,
    79,    89,    100,    111,    123,    136,    149,    163,
    178,    193,    208,    225,    242,    259,    277,    296,
    315,    335,    356,    377,    399,    421,    444,    468,
    492,    517,    542,    568,    595,    622,    650,    678,
    707,    736,    766,    797,    829,    860,    893,    926,
    960,    994,    1029,    1064,    1100,    1136,    1174,    1211,
    1250,    1288,    1328,    1368,    1408,    1449,    1491,    1533,
    1576,    1619,    1663,    1708,    1753,    1798,    1844,    1891,
    1938,    1986,    2034,    2083,    2133,    2182,    2233,    2284,
    2335,    2387,    2440,    2493,    2547,    2601,    2655,    2711,
    2766,    2823,    2879,    2937,    2994,    3053,    3111,    3170,
    3230,    3290,    3351,    3412,    3474,    3536,    3599,    3662,
    3726,    3790,    3855,    3920,    3985,    4051,    4118,    4185,
    4252,    4320,    4388,    4457,    4526,    4596,    4666,    4737,
    4808,    4879,    4951,    5023,    5096,    5169,    5243,    5317,
    5391,    5466,    5541,    5617,    5693,    5769,    5846,    5923,
    6001,    6079,    6157,    6236,    6315,    6395,    6475,    6555,
    6636,    6717,    6798,    6880,    6962,    7045,    7128,    7211,
    7294,    7378,    7463,    7547,    7632,    7717,    7803,    7889,
    7975,    8061,    8148,    8235,    8323,    8411,    8499,    8587,
    8676,    8765,    8854,    8943,    9033,    9123,    9214,    9304,
    9395,    9486,    9578,    9669,    9761,    9853,    9946,    10038,
    10131,    10224,    10318,    10411,    10505,    10599,    10693,    10788,
    10883,    10977,    11073,    11168,    11263,    11359,    11455,    11551,
    11647,    11744,    11840,    11937,    12034,    12131,    12228,    12326,
    12423,    12521,    12619,    12717,    12815,    12913,    13012,    13110,
    13209,    13308,    13407,    13506,    13605,    13704,    13803,    13903,
    14002,    14102,    14201,    14301,    14401,    14501,    14601,    14701,
    14801,    14901,    15002,    15102,    15202,    15303,    15403,    15503,
    15604,    15704,    15805,    15906,    16006,    16107,    16207,    16308,
    16409,    16509,    16610,    16711,    16811,    16912,    17012,    17113,
    17213,    17314,    17414,    17515,    17615,    17715,    17816,    17916,
    18016,    18116,    18216,    18316,    18416,    18516,    18615,    18715,
    18815,    18914,    19014,    19113,    19212,    19311,    19410,    19509,
    19608,    19706,    19805,    19903,    20001,    20099,    20197,    20295,
    20393,    20490,    20587,    20685,    20782,    20878,    20975,    21072,
    21168,    21264,    21360,    21456,    21551,    21647,    21742,    21837,
    21932,    22026,    22121,    22215,    22309,    22403,    22496,    22589,
    22682,    22775,    22868,    22960,    23052,    23144,    23235,    23326,
    23417,    23508,    23599,    23689,    23779,    23868,    23958,    24047,
    24136,    24224,    24312,    24400,    24488,    24575,    24662,    24749,
    24835,    24921,    25007,    25092,    25178,    25262,    25347,    25431,
    25514,    25598,    25681,    25764,    25846,    25928,    26009,    26091,
    26172,    26252,    26332,    26412,    26491,    26570,    26649,    26727,
    26805,    26882,    26960,    27036,    27112,    27188,    27264,    27339,
    27413,    27488,    27561,    27635,    27708,    27780,    27852,    27924,
    27995,    28066,    28136,    28206,    28275,    28344,    28413,    28481,
    28549,    28616,    28683,    28749,    28815,    28880,    28945,    29009,
    29073,    29136,    29199,    29262,    29324,    29385,    29446,    29507,
    29567,    29626,    29685,    29744,    29802,    29859,    29916,    29973,
    30029,    30084,    30139,    30193,    30247,    30301,    30353,    30406,
    30457,    30509,    30559,    30610,    30659,    30708,    30757,    30805,
    30852,    30899,    30946,    30992,    31037,    31082,    31126,    31169,
    31212,    31255,    31297,    31338,    31379,    31419,    31459,    31498,
    31537,    31575,    31612,    31649,    31685,    31721,    31756,    31790,
    31824,    31858,    31890,    31923,    31954,    31985,    32016,    32045,
    32075,    32103,    32131,    32159,    32186,    32212,    32238,    32263,
    32287,    32311,    32334,    32357,    32379,    32401,    32421,    32442,
    32461,    32480,    32499,    32517,    32534,    32550,    32566,    32582,
    32597,    32611,    32624,    32637,    32650,    32661,    32672,    32683,
    32693,    32702,    32711,    32719,    32726,    32733,    32739,    32745,
    32750,    32754,    32758,    32761,    32763,    32765,    32766,    32766,
    32766,    32766,    32765,    32763,    32761,    32758,    32754,    32750,
    32745,    32739,    32733,    32726,    32719,    32711,    32702,    32693,
    32683,    32672,    32661,    32650,    32637,    32624,    32611,    32597,
    32582,    32566,    32550,    32534,    32517,    32499,    32480,    32461,
    32442,    32421,    32401,    32379,    32357,    32334,    32311,    32287,
    32263,    32238,    32212,    32186,    32159,    32131,    32103,    32075,
    32045,    32016,    31985,    31954,    31923,    31890,    31858,    31824,
    31790,    31756,    31721,    31685,    31649,    31612,    31575,    31537,
    31498,    31459,    31419,    31379,    31338,    31297,    31255,    31212,
    31169,    31126,    31082,    31037,    30992,    30946,    30899,    30852,
    30805,    30757,    30708,    30659,    30610,    30559,    30509,    30457,
    30406,    30353,    30301,    30247,    30193,    30139,    30084,    30029,
    29973,    29916,    29859,    29802,    29744,    29685,    29626,    29567,
    29507,    29446,    29385,    29324,    29262,    29199,    29136,    29073,
    29009,    28945,    28880,    28815,    28749,    28683,    28616,    28549,
    28481,    28413,    28344,    28275,    28206,    28136,    28066,    27995,
    27924,    27852,    27780,    27708,    27635,    27561,    27488,    27413,
    27339,    27264,    27188,    27112,    27036,    26960,    26882,    26805,
    26727,    26649,    26570,    26491,    26412,    26332,    26252,    26172,
    26091,    26009,    25928,    25846,    25764,    25681,    25598,    25514,
    25431,    25347,    25262,    25178,    25092,    25007,    24921,    24835,
    24749,    24662,    24575,    24488,    24400,    24312,    24224,    24136,
    24047,    23958,    23868,    23779,    23689,    23599,    23508,    23417,
    23326,    23235,    23144,    23052,    22960,    22868,    22775,    22682,
    22589,    22496,    22403,    22309,    22215,    22121,    22026,    21932,
    21837,    21742,    21647,    21551,    21456,    21360,    21264,    21168,
    21072,    20975,    20878,    20782,    20685,    20587,    20490,    20393,
    20295,    20197,    20099,    20001,    19903,    19805,    19706,    19608,
    19509,    19410,    19311,    19212,    19113,    19014,    18914,    18815,
    18715,    18615,    18516,    18416,    18316,    18216,    18116,    18016,
    17916,    17816,    17715,    17615,    17515,    17414,    17314,    17213,
    17113,    17012,    16912,    16811,    16711,    16610,    16509,    16409,
    16308,    16207,    16107,    16006,    15906,    15805,    15704,    15604,
    15503,    15403,    15303,    15202,    15102,    15002,    14901,    14801,
    14701,    14601,    14501,    14401,    14301,    14201,    14102,    14002,
    13903,    13803,    13704,    13605,    13506,    13407,    13308,    13209,
    13110,    13012,    12913,    12815,    12717,    12619,    12521,    12423,
    12326,    12228,    12131,    12034,    11937,    11840,    11744,    11647,
    11551,    11455,    11359,    11263,    11168,    11073,    10977,    10883,
    10788,    10693,    10599,    10505,    10411,    10318,    10224,    10131,
    10038,    9946,    9853,    9761,    9669,    9578,    9486,    9395,
    9304,    9214,    9123,    9033,    8943,    8854,    8765,    8676,
    8587,    8499,    8411,    8323,    8235,    8148,    8061,    7975,
    7889,    7803,    7717,    7632,    7547,    7463,    7378,    7294,
    7211,    7128,    7045,    6962,    6880,    6798,    6717,    6636,
    6555,    6475,    6395,    6315,    6236,    6157,    6079,    6001,
    5923,    5846,    5769,    5693,    5617,    5541,    5466,    5391,
    5317,    5243,    5169,    5096,    5023,    4951,    4879,    4808,
    4737,    4666,    4596,    4526,    4457,    4388,    4320,    4252,
    4185,    4118,    4051,    3985,    3920,    3855,    3790,    3726,
    3662,    3599,    3536,    3474,    3412,    3351,    3290,    3230,
    3170,    3111,    3053,    2994,    2937,    2879,    2823,    2766,
    2711,    2655,    2601,    2547,    2493,    2440,    2387,    2335,
    2284,    2233,    2182,    2133,    2083,    2034,    1986,    1938,
    1891,    1844,    1798,    1753,    1708,    1663,    1619,    1576,
    1533,    1491,    1449,    1408,    1368,    1328,    1288,    1250,
    1211,    1174,    1136,    1100,    1064,    1029,    994,    960,
    926,    893,    860,    829,    797,    766,    736,    707,
    678,    650,    622,    595,    568,    542,    517,    492,
    468,    444,    421,    399,    377,    356,    335,    315,
    296,    277,    259,    242,    225,    208,    193,    178,
    163,    149,    136,    123,    111,    100,    89,    79,
    69,    61,    52,    44,    37,    31,    25,    20,
    15,    11,    8,    5,    3,    1,    0,    0,
};

int16_t twiddleReal[MAX_FFT_SIZE/2] = {
    32766,    32766,    32765,    32761,    32757,    32752,    32745,    32737,
    32728,    32717,    32705,    32692,    32678,    32663,    32646,    32628,
    32609,    32589,    32567,    32545,    32521,    32495,    32469,    32441,
    32412,    32382,    32351,    32318,    32285,    32250,    32213,    32176,
    32137,    32098,    32057,    32014,    31971,    31926,    31880,    31833,
    31785,    31736,    31685,    31633,    31580,    31526,    31470,    31414,
    31356,    31297,    31237,    31176,    31113,    31050,    30985,    30919,
    30852,    30783,    30714,    30643,    30571,    30498,    30424,    30349,
    30273,    30195,    30117,    30037,    29956,    29874,    29791,    29706,
    29621,    29534,    29447,    29358,    29268,    29177,    29085,    28992,
    28898,    28803,    28706,    28609,    28510,    28411,    28310,    28208,
    28105,    28001,    27896,    27790,    27683,    27575,    27466,    27356,
    27245,    27133,    27019,    26905,    26790,    26674,    26556,    26438,
    26319,    26198,    26077,    25955,    25832,    25708,    25582,    25456,
    25329,    25201,    25072,    24942,    24811,    24680,    24547,    24413,
    24279,    24143,    24007,    23870,    23731,    23592,    23452,    23311,
    23170,    23027,    22884,    22739,    22594,    22448,    22301,    22154,
    22005,    21856,    21705,    21554,    21403,    21250,    21096,    20942,
    20787,    20631,    20475,    20317,    20159,    20000,    19841,    19680,
    19519,    19357,    19195,    19032,    18868,    18703,    18537,    18371,
    18204,    18037,    17869,    17700,    17530,    17360,    17189,    17018,
    16846,    16673,    16499,    16325,    16151,    15976,    15800,    15623,
    15446,    15269,    15090,    14912,    14732,    14553,    14372,    14191,
    14010,    13828,    13645,    13462,    13279,    13094,    12910,    12725,
    12539,    12353,    12167,    11980,    11793,    11605,    11417,    11228,
    11039,    10849,    10659,    10469,    10278,    10087,    9896,    9704,
    9512,    9319,    9126,    8933,    8739,    8545,    8351,    8157,
    7962,    7767,    7571,    7375,    7179,    6983,    6786,    6590,
    6393,    6195,    5998,    5800,    5602,    5404,    5205,    5007,
    4808,    4609,    4410,    4210,    4011,    3811,    3612,    3412,
    3212,    3012,    2811,    2611,    2410,    2210,    2009,    1809,
    1608,    1407,    1206,    1005,    804,    603,    402,    201,
    0,    -201,    -402,    -603,    -804,    -1005,    -1206,    -1407,
    -1608,    -1809,    -2009,    -2210,    -2410,    -2611,    -2811,    -3012,
    -3212,    -3412,    -3612,    -3811,    -4011,    -4210,    -4410,    -4609,
    -4808,    -5007,    -5205,    -5404,    -5602,    -5800,    -5998,    -6195,
    -6393,    -6590,    -6786,    -6983,    -7179,    -7375,    -7571,    -7767,
    -7962,    -8157,    -8351,    -8545,    -8739,    -8933,    -9126,    -9319,
    -9512,    -9704,    -9896,    -10087,    -10278,    -10469,    -10659,    -10849,
    -11039,    -11228,    -11417,    -11605,    -11793,    -11980,    -12167,    -12353,
    -12539,    -12725,    -12910,    -13094,    -13279,    -13462,    -13645,    -13828,
    -14010,    -14191,    -14372,    -14553,    -14732,    -14912,    -15090,    -15269,
    -15446,    -15623,    -15800,    -15976,    -16151,    -16325,    -16499,    -16673,
    -16846,    -17018,    -17189,    -17360,    -17530,    -17700,    -17869,    -18037,
    -18204,    -18371,    -18537,    -18703,    -18868,    -19032,    -19195,    -19357,
    -19519,    -19680,    -19841,    -20000,    -20159,    -20317,    -20475,    -20631,
    -20787,    -20942,    -21096,    -21250,    -21403,    -21554,    -21705,    -21856,
    -22005,    -22154,    -22301,    -22448,    -22594,    -22739,    -22884,    -23027,
    -23170,    -23311,    -23452,    -23592,    -23731,    -23870,    -24007,    -24143,
    -24279,    -24413,    -24547,    -24680,    -24811,    -24942,    -25072,    -25201,
    -25329,    -25456,    -25582,    -25708,    -25832,    -25955,    -26077,    -26198,
    -26319,    -26438,    -26556,    -26674,    -26790,    -26905,    -27019,    -27133,
    -27245,    -27356,    -27466,    -27575,    -27683,    -27790,    -27896,    -28001,
    -28105,    -28208,    -28310,    -28411,    -28510,    -28609,    -28706,    -28803,
    -28898,    -28992,    -29085,    -29177,    -29268,    -29358,    -29447,    -29534,
    -29621,    -29706,    -29791,    -29874,    -29956,    -30037,    -30117,    -30195,
    -30273,    -30349,    -30424,    -30498,    -30571,    -30643,    -30714,    -30783,
    -30852,    -30919,    -30985,    -31050,    -31113,    -31176,    -31237,    -31297,
    -31356,    -31414,    -31470,    -31526,    -31580,    -31633,    -31685,    -31736,
    -31785,    -31833,    -31880,    -31926,    -31971,    -32014,    -32057,    -32098,
    -32137,    -32176,    -32213,    -32250,    -32285,    -32318,    -32351,    -32382,
    -32412,    -32441,    -32469,    -32495,    -32521,    -32545,    -32567,    -32589,
    -32609,    -32628,    -32646,    -32663,    -32678,    -32692,    -32705,    -32717,
    -32728,    -32737,    -32745,    -32752,    -32757,    -32761,    -32765,    -32766,
};

int16_t twiddleImag[MAX_FFT_SIZE/2] = {
    0,    -201,    -402,    -603,    -804,    -1005,    -1206,    -1407,
    -1608,    -1809,    -2009,    -2210,    -2410,    -2611,    -2811,    -3012,
    -3212,    -3412,    -3612,    -3811,    -4011,    -4210,    -4410,    -4609,
    -4808,    -5007,    -5205,    -5404,    -5602,    -5800,    -5998,    -6195,
    -6393,    -6590,    -6786,    -6983,    -7179,    -7375,    -7571,    -7767,
    -7962,    -8157,    -8351,    -8545,    -8739,    -8933,    -9126,    -9319,
    -9512,    -9704,    -9896,    -10087,    -10278,    -10469,    -10659,    -10849,
    -11039,    -11228,    -11417,    -11605,    -11793,    -11980,    -12167,    -12353,
    -12539,    -12725,    -12910,    -13094,    -13279,    -13462,    -13645,    -13828,
    -14010,    -14191,    -14372,    -14553,    -14732,    -14912,    -15090,    -15269,
    -15446,    -15623,    -15800,    -15976,    -16151,    -16325,    -16499,    -16673,
    -16846,    -17018,    -17189,    -17360,    -17530,    -17700,    -17869,    -18037,
    -18204,    -18371,    -18537,    -18703,    -18868,    -19032,    -19195,    -19357,
    -19519,    -19680,    -19841,    -20000,    -20159,    -20317,    -20475,    -20631,
    -20787,    -20942,    -21096,    -21250,    -21403,    -21554,    -21705,    -21856,
    -22005,    -22154,    -22301,    -22448,    -22594,    -22739,    -22884,    -23027,
    -23170,    -23311,    -23452,    -23592,    -23731,    -23870,    -24007,    -24143,
    -24279,    -24413,    -24547,    -24680,    -24811,    -24942,    -25072,    -25201,
    -25329,    -25456,    -25582,    -25708,    -25832,    -25955,    -26077,    -26198,
    -26319,    -26438,    -26556,    -26674,    -26790,    -26905,    -27019,    -27133,
    -27245,    -27356,    -27466,    -27575,    -27683,    -27790,    -27896,    -28001,
    -28105,    -28208,    -28310,    -28411,    -28510,    -28609,    -28706,    -28803,
    -28898,    -28992,    -29085,    -29177,    -29268,    -29358,    -29447,    -29534,
    -29621,    -29706,    -29791,    -29874,    -29956,    -30037,    -30117,    -30195,
    -30273,    -30349,    -30424,    -30498,    -30571,    -30643,    -30714,    -30783,
    -30852,    -30919,    -30985,    -31050,    -31113,    -31176,    -31237,    -31297,
    -31356,    -31414,    -31470,    -31526,    -31580,    -31633,    -31685,    -31736,
    -31785,    -31833,    -31880,    -31926,    -31971,    -32014,    -32057,    -32098,
    -32137,    -32176,    -32213,    -32250,    -32285,    -32318,    -32351,    -32382,
    -32412,    -32441,    -32469,    -32495,    -32521,    -32545,    -32567,    -32589,
    -32609,    -32628,    -32646,    -32663,    -32678,    -32692,    -32705,    -32717,
    -32728,    -32737,    -32745,    -32752,    -32757,    -32761,    -32765,    -32766,
    -32767,    -32766,    -32765,    -32761,    -32757,    -32752,    -32745,    -32737,
    -32728,    -32717,    -32705,    -32692,    -32678,    -32663,    -32646,    -32628,
    -32609,    -32589,    -32567,    -32545,    -32521,    -32495,    -32469,    -32441,
    -32412,    -32382,    -32351,    -32318,    -32285,    -32250,    -32213,    -32176,
    -32137,    -32098,    -32057,    -32014,    -31971,    -31926,    -31880,    -31833,
    -31785,    -31736,    -31685,    -31633,    -31580,    -31526,    -31470,    -31414,
    -31356,    -31297,    -31237,    -31176,    -31113,    -31050,    -30985,    -30919,
    -30852,    -30783,    -30714,    -30643,    -30571,    -30498,    -30424,    -30349,
    -30273,    -30195,    -30117,    -30037,    -29956,    -29874,    -29791,    -29706,
    -29621,    -29534,    -29447,    -29358,    -29268,    -29177,    -29085,    -28992,
    -28898,    -28803,    -28706,    -28609,    -28510,    -28411,    -28310,    -28208,
    -28105,    -28001,    -27896,    -27790,    -27683,    -27575,    -27466,    -27356,
    -27245,    -27133,    -27019,    -26905,    -26790,    -26674,    -26556,    -26438,
    -26319,    -26198,    -26077,    -25955,    -25832,    -25708,    -25582,    -25456,
    -25329,    -25201,    -25072,    -24942,    -24811,    -24680,    -24547,    -24413,
    -24279,    -24143,    -24007,    -23870,    -23731,    -23592,    -23452,    -23311,
    -23170,    -23027,    -22884,    -22739,    -22594,    -22448,    -22301,    -22154,
    -22005,    -21856,    -21705,    -21554,    -21403,    -21250,    -21096,    -20942,
    -20787,    -20631,    -20475,    -20317,    -20159,    -20000,    -19841,    -19680,
    -19519,    -19357,    -19195,    -19032,    -18868,    -18703,    -18537,    -18371,
    -18204,    -18037,    -17869,    -17700,    -17530,    -17360,    -17189,    -17018,
    -16846,    -16673,    -16499,    -16325,    -16151,    -15976,    -15800,    -15623,
    -15446,    -15269,    -15090,    -14912,    -14732,    -14553,    -14372,    -14191,
    -14010,    -13828,    -13645,    -13462,    -13279,    -13094,    -12910,    -12725,
    -12539,    -12353,    -12167,    -11980,    -11793,    -11605,    -11417,    -11228,
    -11039,    -10849,    -10659,    -10469,    -10278,    -10087,    -9896,    -9704,
    -9512,    -9319,    -9126,    -8933,    -8739,    -8545,    -8351,    -8157,
    -7962,    -7767,    -7571,    -7375,    -7179,    -6983,    -6786,    -6590,
    -6393,    -6195,    -5998,    -5800,    -5602,    -5404,    -5205,    -5007,
    -4808,    -4609,    -4410,    -4210,    -4011,    -3811,    -3612,    -3412,
    -3212,    -3012,    -2811,    -2611,    -2410,    -2210,    -2009,    -1809,
    -1608,    -1407,    -1206,    -1005,    -804,    -603,    -402,    -201,
};



/**************FFT configuration************/



unsigned int ReceivedCount = 0;

/**
 * @brief System initialization
 **/

Ipv4Addr ipv4Addr;

void systemInit(void)
{
   error_t error;
   MacAddr macAddr;

   //Initialize kernel
   osInitKernel();

   //TCP/IP stack initialization
   error = netInit();

   //Configure the first Ethernet interface

   //Set interface name
   netSetInterfaceName(&netInterface[0], "eth0");
   //Set host name
   netSetHostname(&netInterface[0], "UDPEcho");
   //Select the relevant network adapter
   netSetDriver(&netInterface[0], &enc624j600Driver);
   //netSetPhyDriver(interface, &lan8720PhyDriver);

   netSetSpiDriver(&netInterface[0], &spiDriver);
   netSetExtIntDriver(&netInterface[0], &extIntDriver);

#if (APP_USE_DEFAULT_MAC_ADDR == ENABLED)
   //Use the factory preprogrammed MAC address
   macStringToAddr("00-00-00-00-00-00", &macAddr);
   netSetMacAddr(&netInterface[0], &macAddr);
#endif

   //Initialize network interface
   error = netConfigInterface(&netInterface[0]);
   //Any error to report?

#if (IPV4_SUPPORT == ENABLED)

   //Set IPv4 host address
   ipv4StringToAddr(APP_IPV4_HOST_ADDR, &ipv4Addr);
   ipv4SetHostAddr(&netInterface[0], ipv4Addr);

   //Set subnet mask
   ipv4StringToAddr(APP_IPV4_SUBNET_MASK, &ipv4Addr);
   ipv4SetSubnetMask(&netInterface[0], ipv4Addr);

   //Set default gateway
   ipv4StringToAddr(APP_IPV4_DEFAULT_GATEWAY, &ipv4Addr);
   ipv4SetDefaultGateway(&netInterface[0], ipv4Addr);

   //Set primary and secondary DNS servers
   ipv4StringToAddr(APP_IPV4_PRIMARY_DNS, &ipv4Addr);
   ipv4SetDnsServer(&netInterface[0], 0, ipv4Addr);
   ipv4StringToAddr(APP_IPV4_SECONDARY_DNS, &ipv4Addr);
   ipv4SetDnsServer(&netInterface[0], 1, ipv4Addr);
#endif

   //init_platform();
}




/**
 * @brief LED blinking task
 **/


void blinkTask()
{
	if(counter++>100000)
	{
		XGpio_DiscreteWrite(&outputLED, 2, XGpio_DiscreteRead(&outputLED, 2) ^ 0x2);
		counter = 0;
	}
}


XUartLite UartLite;
#define TEST_BUFFER_SIZE 16
//u8 SendBuffer[TEST_BUFFER_SIZE];	/* Buffer for Transmitting Data */
u8 RecvBuffer[TEST_BUFFER_SIZE];	/* Buffer for Receiving Data */

void uartInit(){
	int Status;

	Status = XUartLite_Initialize(&UartLite, XPAR_AXI_UARTLITE_0_DEVICE_ID);
	Status = XUartLite_SelfTest(&UartLite);
}


void uartTask(){
		ReceivedCount += XUartLite_Recv(&UartLite,
					   RecvBuffer + ReceivedCount,
					   TEST_BUFFER_SIZE - ReceivedCount);

}

// Pré-calculs : à générer hors ligne si possible
void init_twiddles(uint16_t N) {
    for (uint16_t k = 0; k < N/2; k++) {
        double angle = -2.0 * PI * k / N;
        twiddleReal[k] = (int16_t)(32767.0 * cos(angle));  // Q1.15
        twiddleImag[k] = (int16_t)(32767.0 * sin(angle));  // Q1.15
    }
}

void init_window(uint16_t N) {
    for (uint16_t i = 0; i < N; i++) {
        double w = 0.5 * (1 - cos(2.0 * PI * i / (N-1)));
        windowTable[i] = (int16_t)(32767.0 * w); // Q1.15
    }
}

// Génération d’un sinus fenêtré en Q1.15
//void InitProcessedData() {
//    const int16_t scale_num = 5;   // approx 5/128
//    const int16_t scale_den = 128;
//
//    for (uint16_t i = 0; i < MAX_FFT_SIZE; i++) {
//        double angle = 2.0 * PI * ((double)scale_num * i) / (double)scale_den;
//        int16_t sine = (int16_t)(32767.0 * sin(angle)); // Q1.15
//        int32_t prod = (int32_t)sine * windowTable[i];  // Q1.15 * Q1.15
//        SourceBuffer[i] = (int16_t)(prod >> 15);              // Q1.15
//    }
//}

// FFT Radix-2 sur Q1.15 : sortie énergie |X[k]|² pour k=0..N/2

/*
 * do_forward_FFT : Calcule une FFT 1024 points en Q1.15.
 * SourceBuffer : signal d’entrée Q1.15
 * FFTBuffer    : sortie avec imag << 16 | real (toujours en Q1.15)
 */
void bit_reverse(int16_t *xr, int16_t *xi, int N) {
    unsigned int j = 0;
    for (unsigned int i = 0; i < N; i++) {
        if (i < j) {
            int16_t tmp_r = xr[i];
            int16_t tmp_i = xi[i];
            xr[i] = xr[j];
            xi[i] = xi[j];
            xr[j] = tmp_r;
            xi[j] = tmp_i;
        }
        unsigned int bit = N >> 1;
        while (j & bit) { j ^= bit; bit >>= 1; }
        j |= bit;
    }
}

void do_forward_FFT_seq(int16_t *SourceBuffer, int32_t *FFTBuffer, int N) {
    double xr[MAX_FFT_SIZE];
    double xi[MAX_FFT_SIZE];

    // Charger les données d'entrée (en double)
    for (int i = 0; i < N; i++) {
        xr[i] = (double)SourceBuffer[i];
        xi[i] = 0.0;
    }

    // Réordonner en bit-reversal (en double)
    int j = 0;
    for (int i = 0; i < N; i++) {
        if (i < j) {
            double tr = xr[i];
            double ti = xi[i];
            xr[i] = xr[j];
            xi[i] = xi[j];
            xr[j] = tr;
            xi[j] = ti;
        }
        int m = N >> 1;
        while (j >= m && m > 0) {
            j -= m;
            m >>= 1;
        }
        j += m;
    }

    // FFT Cooley-Tukey (radix-2, itératif)
    for (int len = 2; len <= N; len <<= 1) {
        double ang = -2.0 * M_PI / (double)len;
        double wlen_r = cos(ang);
        double wlen_i = sin(ang);

        for (int i = 0; i < N; i += len) {
            double wr = 1.0;
            double wi = 0.0;
            for (int j = 0; j < len / 2; j++) {
                int u = i + j;
                int v = i + j + len / 2;

                double tr = wr * xr[v] - wi * xi[v];
                double ti = wr * xi[v] + wi * xr[v];

                xr[v] = xr[u] - tr;
                xi[v] = xi[u] - ti;
                xr[u] += tr;
                xi[u] += ti;

                // mise à jour du twiddle factor
                double tmp = wr;
                wr = tmp * wlen_r - wi * wlen_i;
                wi = tmp * wlen_i + wi * wlen_r;
            }
        }
    }

    // Stocker les 16 premiers bins complexes dans FFTBuffer :
    // 32 bits par bin (16 bits imag haut, 16 bits réel bas)
    for (int i = 0; i < 16; i++) {
        int16_t r  = (int16_t)lrint(xr[i]);  // arrondi
        int16_t im = (int16_t)lrint(xi[i]);
        FFTBuffer[i] = ((int32_t)(im & 0xFFFF) << 16) | ((uint16_t)(r & 0xFFFF));
    }
}
void InitProcessedData()
{
    unsigned int i;
    const float scale = 5.5/128.0; // fréquence normalisée
    const unsigned int N = MAX_DATA_BUFFER_SIZE;

    for (i = 0; i < N; i++) {
        float sample = 128 * sinf(2 * M_PI * scale * i);
        float window = 0.5 * (1 - cosf(2 * M_PI * i / (N - 1))); // Hanning
        float windowed = sample * window;

        // Partie réelle = windowed, partie imaginaire = 0
        int16_t real = (int16_t)windowed;
        int16_t imag = 0;
        SourceBuffer[i] = ((uint16_t)imag << 16) | ((uint16_t)real & 0xFFFF);
    }
}







/**
 * @brief Main entry point
 * @return Unused value
 **/
//const char* allo = "Hi type somtin\n\r";

bool udpSocketUp = false;

int_t main(void)
{

   XGpio_Initialize(&outputLED, XPAR_AXI_GPIO_0_DEVICE_ID);
   XGpio_SetDataDirection(&outputLED, 2, 0x0); //Fixer la direction du port 1 de l'AXI_GPIO_1 comme output

   uartInit();
   InitProcessedData();
   initFIFO_FFT();
   //Create user task
   print("\n\rHello World 4\n\r");


   print("\nmerci1");
   int my_var=1;
//   init_window(MAX_FFT_SIZE);
//   print("\nwindow ok");
//   init_twiddles(MAX_FFT_SIZE);
//   print("\ntwiddles ok");
//   InitProcessedData();
//   print("\ndata ok");

   while(1){

	   blinkTask();
	   uartTask();
	   if(ReceivedCount){
		   print("\nbien recu mageuzx\n");
		   XUartLite_Send(&UartLite, RecvBuffer , ReceivedCount);
		   ReceivedCount = 0;
	   }
	   if(my_var){
		   print("\nbien recu chef\n");
		   my_var=0;

		   print("\n\rNew FFT-IFFT cycle\n\r");
		   			   /* Writing into the FFT CONFIG Port */
		   do_forward_FFT(SourceBuffer, FFTBuffer);

		   do_reverse_FFT(FFTBuffer, iFFTResult);

		   			   // Signal d'entrée
		   			   print("\nInputSignal = [");
		   			   for (unsigned int i = 0; i < MAX_DATA_BUFFER_SIZE; i++) {
		   				   int16_t real = (int16_t)(SourceBuffer[i] & 0xFFFF);
		   				   xil_printf("%d", real);
		   				   if (i < MAX_FFT_SIZE - 1) xil_printf(", ");
		   			   }
		   			   print("]\n");

		   			   // Amplitude FFT (première moitié seulement)
		   			   print("\nFFTBuffer = [");
		   			   for (unsigned int i = 0; i < MAX_DATA_BUFFER_SIZE / 2; i++) {
		   				   int16_t real = (int16_t)(FFTBuffer[i] & 0xFFFF);
		   				   int16_t imag = (int16_t)(FFTBuffer[i] >> 16);
		   				   float amp = sqrtf((float)real * real + (float)imag * imag);
		   				   int amp_milli = (int)(amp * 1000); // milli-unités
		   				   xil_printf("%d", amp_milli);
		   				   if (i < (MAX_FFT_SIZE / 2) - 1) xil_printf(", ");
		   			   }
		   			   print("]\n");

		   			print("\nReconstructedSignal = [");
		   					   for (unsigned int i = 0; i < MAX_DATA_BUFFER_SIZE; i++) {
		   					       int16_t real = (int16_t)(IFFTBuffer[i] & 0xFFFF);
		   					       xil_printf("%d", real);
		   					       if (i < MAX_DATA_BUFFER_SIZE - 1) xil_printf(", ");
		   					   }
	   }

   }

   //This function should never return
   return 0;
}
/* main.c
 *
 *  Created on: 25 mars 2019
 *      Author: jbm
 */




